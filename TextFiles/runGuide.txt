Run Guide - MasterThesis project

Environment setup
  1. Install uv (macOS via Homebrew, Windows via winget `Astral.Uv`).
  2. Create or refresh the local env with `uv sync --locked` (append `--group dev` / `--group ml` as needed).
  3. Interpreter selection:
     - macOS/Linux: pick `./.venv/bin/python` in VS Code or source `.venv/bin/activate`.
     - Windows: pick `./.venv/Scripts/python.exe` in VS Code or run `.venv\Scripts\Activate.ps1`.

Port turnaround dataset pipeline
  - Command: `uv run python Models/build_port_turnaround_dataset.py`
    - Outputs: `DataSets/Derived/port_turnaround_training.csv` (always) and `.parquet` when a parquet engine is installed.
    - Notes: Script emits QA counts at the end and warns if parquet export is skipped (install `pyarrow` or `fastparquet`).

Port turnaround lookup generation
  - Prerequisite: Latest `port_turnaround_training.csv` from the step above.
  - Command: `uv run python Models/port_turnaround_lookup.py`
    - Outputs: `DataSets/Derived/port_turnaround_lookup.csv` plus `.parquet` when supported.

QA artefacts for thesis figures
  - Command: `uv run python QA/port_turnaround_dataset_qa.py`
    - Outputs:
      * `DataSets/Derived/QA/port_turnaround_training_overview.txt`
      * `DataSets/Derived/QA/port_turnaround_training_guardrails.txt`
      * `DataSets/Derived/QA/port_turnaround_missingness_by_port.csv`
      * `DataSets/Derived/QA/port_turnaround_missingness_by_port_terminal.csv`
      * SVG charts in `DataSets/Derived/QA/figures/`
  - Command: `uv run python QA/port_turnaround_lookup_qa.py`
    - Outputs: combined lookup summary SVG at `DataSets/Derived/QA/figures/port_turnaround_lookup_summary.svg` (duration bins + fallback levels).

General tips
  - Prefer `uv run <cmd>` so dependency resolution stays consistent across OSes.
  - If PowerShell blocks scripts, run `Set-ExecutionPolicy -Scope CurrentUser RemoteSigned` once.
  - Commit generated figures/text outputs to track data snapshots referenced in the thesis.
