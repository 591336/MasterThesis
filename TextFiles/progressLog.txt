2025-10-03T10:53:15+02:00 - Port turnaround data assembly refresh
  - Updated `pyproject.toml` to include `pyarrow` in core dependencies so parquet exports can run cross-platform.
  - Added `try_write_parquet` helpers in `Models/build_port_turnaround_dataset.py` and `Models/port_turnaround_lookup.py` to degrade gracefully when parquet engines are unavailable.
  - Executed `.venv/bin/python Models/build_port_turnaround_dataset.py`; CSV regenerated with 80 rows, parquet skipped pending engine install. Logged outcome in `contextHelper.txt` (Step 1 checklist item 1 completed).
  - Observed Pandas `DataFrameGroupBy.apply` deprecation warning; earmarked for later cleanup during preprocessing polish.

2025-10-03T10:58:18+02:00 - QA overview + lightweight figures
  - Authored `QA/port_turnaround_dataset_qa.py` to regenerate schema stats and produce SVG outputs without external plotting deps.
  - Generated `DataSets/Derived/NorthernLights/QA/reports/port_turnaround_training_overview.txt` documenting dtypes and null ratios (TERMINAL_ID ~99% missing, VESSEL_TYPE_ID ~14%).
  - Saved thesis-ready charts: `DataSets/Derived/NorthernLights/QA/figures/port_turnaround_days_in_port_hist.svg` and `.../port_turnaround_missingness.svg`.
  - Updated `contextHelper.txt` (Step 1 checklist item 2 marked complete with references to generated artefacts).

2025-10-03T11:31:38+02:00 - Documented current cleaning strategy
  - Captured the applied preprocessing choices in `TextFiles/contextHelper.txt` (column normalization, numeric coercion, duration bounds, intra-group trimming, vessel-type backfill, optional cargo handling).
  - Rationale notes emphasise robustness (remove implausible durations, curb outlier impact) while retaining traceability for thesis methodology.

2025-10-03T11:51:31+02:00 - Stabilised port turnaround lookup build
  - Adjusted trimming pipeline to use `include_groups=False` without losing key fields (re-joined group columns) and made global fallback aggregation explicit.
  - Suppressed pandas future warnings by parameterising QA groupbys and added resilience to datasets script (`Models/build_port_turnaround_dataset.py`) apply call.
  - Verified `Models/port_turnaround_lookup.py` executes cleanly, emitting 7 lookup rows and QA bins without warnings.

2025-10-03T12:57:34+02:00 - Lookup QA summary & coverage analysis
  - Added `QA/port_turnaround_lookup_qa.py` to generate a single SVG combining duration bins and fallback-level row counts for the thesis.
  - Updated `TextFiles/runGuide.txt` with the new command so the figure is easy to reproduce.
  - Analysed lookup coverage: only two ports with >=3 observations each (n=33 and n=30) and one vessel type; global fallback retains all 80 records, suggesting the dataset is small but trimming is not the bottleneck (null terminal IDs limit specificity).

2025-10-05T15:26:26+02:00 - Cross-platform developer setup
  - Refreshed `README.md` with uv-based bootstrap instructions for macOS/Linux and added a dedicated Windows flow (winget install, interpreter path, PowerShell execution policy tip).
  - Noted persistent PowerShell alias warning (`gl`) so future runs can clean the user profile to silence noise before scripting automation.
  - Planned updates to `TextFiles/runGuide.txt` and `TextFiles/contextHelper.txt` to mirror Windows-specific guidance and keep thesis documentation aligned with the repo.

2025-10-05T15:56:54+02:00 - DAYS_IN_PORT guardrail QA scaffolding
  - Extended `QA/port_turnaround_dataset_qa.py` to emit percentiles and guardrail breach counts into `DataSets/Derived/NorthernLights/QA/reports/port_turnaround_training_guardrails.txt`.
  - Added explicit lower/upper bound constants so thesis reporting matches the preprocessing rationale.
  - Asked Rovik to run `uv run python QA/port_turnaround_dataset_qa.py` on Windows to regenerate QA outputs and confirm no values breach the [0.04, 10] day window.
2025-10-05T16:03:52+02:00 - DAYS_IN_PORT guardrail QA results
  - Ran uv run python QA/port_turnaround_dataset_qa.py; histogram/missingness SVGs refreshed and overview text regenerated.
  - Guardrail report confirms non-null sample = 80, min 0.2000 days, max 5.9785 days, zero breaches outside [0.04, 10].
  - Logged completion of Step 1 item 3 in TextFiles/contextHelper.txt.

2025-10-05T16:10:00+02:00 - Missingness audit scaffolding
  - Extended QA/port_turnaround_dataset_qa.py to export per-port and per-port/terminal null-ratio tables for key fields.
  - Refreshed run guide and context helper with the new QA artefacts and instructions for Step 1 item 4.
  - Requested Rovik rerun uv run python QA/port_turnaround_dataset_qa.py and review the CSV outputs before logging findings.

2025-10-05T16:18:12+02:00 - Missingness tables fix
  - Restructured `QA/port_turnaround_dataset_qa.py` missingness aggregation to avoid column collisions by averaging explicit is-null indicators; CSVs now write successfully.
  - Asked Rovik to rerun `uv run python QA/port_turnaround_dataset_qa.py` and inspect the per-port/per-terminal outputs before logging Step 1 item 4 findings.
2025-10-05T16:27:00+02:00 - Group coverage QA
  - Extended `QA/port_turnaround_dataset_qa.py` to export `DataSets/Derived/NorthernLights/QA/tables/port_turnaround_group_counts.csv` with n_obs and percentile stats per (PORT_ID, TERMINAL_ID, IS_BALLAST).
  - Updated run guide and context helper to reference the new coverage report for Step 1 item 5.
  - Prompted Rovik to rerun the QA script and review low-support groups before documenting mitigation steps.
2025-10-05T16:38:00+02:00 - Missingness hotspot reporting
  - Enhanced `QA/port_turnaround_dataset_qa.py` to emit per-column missingness notes (`DataSets/Derived/NorthernLights/QA/reports/port_turnaround_missingness_notes.txt`) alongside the existing CSV summaries.
  - Added explicit hotspot threshold (50%) and limited listings to the top groups per column for thesis-ready commentary.
  - Cleaned `TextFiles/contextHelper.txt` formatting while capturing the new audit workflow; updated run guide to include the additional artefact.
2025-10-05T16:45:00+02:00 - Restored port/ballast keys after trimming fix
  - Reworked groupwise quantile filter in `Models/build_port_turnaround_dataset.py` so group columns persist (uses `transform` mask instead of `groupby().apply(...)`).
  - Regenerated dataset + QA artefacts; parquet export now succeeds with pyarrow, and missingness notes highlight only real data gaps.
  - Updated `TextFiles/contextHelper.txt` with missingness & coverage findings (ports 104084/110965 missing terminals; 16 low-support groups).
2025-10-05T16:48:00+02:00 - Logged follow-up actions
  - Captured upstream data fixes needed (terminal joins for ports 104084/110965; vessel metadata for small ports) in `TextFiles/contextHelper.txt` Step 1 item 6.
  - Ready to proceed to Step 2 lookup construction once data refresh plan is in motion.
2025-10-05T16:50:00+02:00 - Step 1 summary
  - Bootstrapped cross-platform dev environment (uv, Windows setup), refreshed README/run guide for macOS/Linux/Windows.
  - Implemented dataset build pipeline with resilient parquet export and upstream trimming fix; dataset regenerates cleanly with `PORT_ID`/`IS_BALLAST` intact and parquet written via pyarrow.
  - Built QA tooling (overview, guardrail stats, missingness tables/notes, group coverage) and logged findings: missing terminals for ports 104084/110965; sparse vessel/commodity metadata on single-observation ports; 16 low-support groups requiring fallback tiers.
  - Recorded follow-up actions to address upstream data gaps before rerunning on richer customer extracts.
2025-10-16T08:57:54+02:00 - Stena dataset scaffolding
  - Created DataSets/Raw/Stena directory to stage new customer extracts.
  - Ready to run row-count sanity SQLs before exporting full tables.
2025-10-16T10:05:00+02:00 - Customer-aware dataset + QA tooling
  - Added reusable customer path resolver (`utils/customer_paths.py`) and CLI flag support (`--customer`) across build, lookup, and QA scripts.
  - Stena outputs now land in `DataSets/Derived/Stena/...` (reports/tables/figures mirror the default structure); `--customer northernlights` maintains current behaviour.
  - Updated run guide and context helper to document the flag; future customers can be added by extending the shared mapping.
2025-10-16T10:45:00+02:00 - Northern Lights artefacts grouped under dedicated directory
  - Moved legacy Northern Lights outputs into `DataSets/Derived/NorthernLights/` to mirror the Stena layout.
  - Updated customer path resolver + documentation so default runs point at the new directory while leaving Stena artefacts untouched.
  - Added `--list-customers` helper across build/lookup/QA scripts for quick discovery of available slugs; README/run guide now reference the multi-customer workflow.
2025-10-16T11:05:00+02:00 - Port turnaround ML roadmap captured
  - Documented modelling milestones (feature engineering, baselines, tuning, packaging) in `TextFiles/contextHelper.txt` to guide the next phase.
  - Planned deliverables: model artefacts under `Models/Artifacts/<customer>/`, QA report in `DataSets/Derived/<customer>/QA/ml/`, helper API for optimiser integration.
2025-10-16T11:12:00+02:00 - Port turnaround ML dataset prep (Stena)
  - Added `Models/train_port_turnaround_model.py` to engineer features, merge voyage dates, and produce time-based train/validation splits.
  - Generated Stena splits with 2025-01-01 cutoff (train=581, val=510) alongside metadata manifest in `DataSets/Derived/Stena/ML/`.
  - Run guide updated with the new command; ready to iterate on baseline DecisionTree/GBM models in the next step.
2025-10-16T11:25:00+02:00 - Port turnaround Decision Tree baseline (Stena)
  - Implemented `Models/fit_port_turnaround_model.py` using sklearn pipelines (imputation + one-hot + DecisionTreeRegressor).
  - Trained baseline (max_depth=8, min_samples_leaf=20); validation MAE 1.24 d vs baseline median MAE 1.31 d.
  - Artefacts stored at `Models/Artifacts/stena/port_turnaround_dt.joblib`; metrics JSON and QA report saved to `Models/Artifacts/stena/` and `DataSets/Derived/Stena/QA/ml/` respectively.
2025-10-16T11:32:00+02:00 - Port turnaround ML visual diagnostics
  - Added `Models/plot_port_turnaround_model.py` to generate actual-vs-predicted and residual plots from trained artefacts.
  - Produced validation visuals for Stena (`DataSets/Derived/Stena/QA/ml/port_turnaround_validation_*.png`); run guide updated with the command.
2025-10-16T11:45:00+02:00 - Port-level median features uplift (Stena)
  - Augmented feature prep with port and port×ballast median turnaround durations (`PORT_MEDIAN_DAYS`, `PORT_IS_BALLAST_MEDIAN_DAYS`).
  - Decision tree validation MAE dropped to 0.73 d (vs 1.31 d lookup baseline); RMSE improved to 1.07 d.
  - Regenerated model artefact, metrics, and QA visuals to reflect the improved feature set; note these medians are computed on the full modelling view—consider train-only aggregation in future iterations to avoid leakage.
2025-10-16T11:58:00+02:00 - HistGradientBoosting baseline experiment
  - Enhanced training script to support `--model hgbt` (sklearn HistGradientBoostingRegressor) with tunable learning rate/iterations and optional log-target training.
  - After regularisation (lr=0.03, max_iter=600, min_samples_leaf=50, log target), validation MAE settled at 0.83 d (slightly above the decision-tree baseline 0.73 d); train MAE 0.49 d indicates remaining overfit—further tuning or target encoding needed.
  - Artefacts saved to `Models/Artifacts/stena/port_turnaround_hgbt.joblib`; QA report overwritten for easy comparison.
2025-10-16T12:12:00+02:00 - Flexible validation splits
  - Added `--validation-ratio` option to `Models/train_port_turnaround_model.py` to support chronological fraction splits alongside the default 2025-01-01 cutoff.
  - Metadata now records split strategy (ratio or cutoff) for reproducibility; run guide updated with new flag.
2025-10-16T12:05:00+02:00 - Sailing time dataset planning
  - Outlined feature/field requirements for `build_sailing_time_dataset.py` (voyage durations, distance splits, vessel attributes, seasonal markers).
  - Mirroring port turnaround workflow: plan to extract Stena-specific voyages, join vessel metadata, compute `hours_per_nm`, and stage 2025 validation split.
  - Awaiting raw SQL exports before implementing dataset build + QA + lookup/ML scripts for the sailing time model.
